@page "/products"
@attribute [Authorize]
@inject ProductHttpClient productService
@inject OrderHttpClient orderService
@inject SweetAlertService Swal
<h1>Products</h1>

@if (products == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Price</th>
                <th>Category</th>
                <th>Stock</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Name</td>
                    <td>@product.Price</td>
                    <td>@product.ProductCategory?.Name</td>
                    <td>@(product.StockQty - @product.HoldQty)</td>
                    <td>
                        <input type="button" disabled="@((product.StockQty - @product.HoldQty) == 0 || commandStarted)"
                               @onclick="@(async e => await this.CheckoutAsync(product.Id,5))"
                               class="btn btn-primary" value="Add to Card" />
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<ProductViewModel> products;
    bool commandStarted = false;
    protected override async Task OnInitializedAsync()
    {
        products = await productService.GetProductsAsync(false);
    }

    private async Task CheckoutAsync(Guid productId, uint qty)
    {
        commandStarted = true;
        await orderService.CheckoutAsync(new ShoppingCartDto
        {
            OrderReceivedItems = new List<CartItemDto>
{
                new CartItemDto
                {
                    ProductId =productId,
                    Qty=qty
                }
            }
        });

        commandStarted = false;
        products.ToList().ForEach(p =>
        {
            if (p.Id == productId)
            {
                p.HoldQty += qty;
            }
        });
        await Swal.FireAsync(new SweetAlertOptions
        {
            Position = "top-end",
            Icon = "success",
            Title = "Order Accepted, You will notify shortly!",
            Timer = 3000,
            Toast = true
        });

        StateHasChanged();
    }
}
