@inherits LayoutComponentBase
@inject IJSRuntime jsRuntime
@inject IAccessTokenProvider TokenProvider
@inject IConfiguration Configuration
@inject SweetAlertService Swal
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <div class="main">
        <div class="top-row px-4 auth">
            <LoginDisplay />
            <a href="https://docs.microsoft.com/aspnet/" target="_blank">About</a>
        </div>

        <div class="content px-4">
            @Body
        </div>
    </div>
</div>


@code {
    private HubConnection hubConnection;
    bool connectedHub = false;
    AccessToken accessToken = new AccessToken();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            var authState = await authenticationStateTask;
            var user = authState.User;

            if (user.Identity.IsAuthenticated && !connectedHub)
            {
                var token = await TokenProvider.RequestAccessToken();
                token.TryGetToken(out accessToken);

                var userId = user.FindFirst("sub")?.Value;

                hubConnection = new HubConnectionBuilder()
                .WithUrl(Configuration["EndPoints:NotificationApi"], opt =>
                {
                    opt.AccessTokenProvider = () => Task.FromResult(accessToken.Value);
                    connectedHub = true;
                })
                .Build();

                hubConnection.On<Notification>(userId, async (message) =>
                {
                    await Swal.FireAsync(new SweetAlertOptions
                    {
                        Position = "top-end",
                        Icon = message.IsError ? "error" : "success",
                        Title = message.Message,
                        Timer = 3000,
                        Toast = true
                    });
                    StateHasChanged();
                });

                await hubConnection.StartAsync();
            }
        }
    }
}